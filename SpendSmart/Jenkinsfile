pipeline {
    agent any

    environment {
        ASPNETCORE_ENVIRONMENT = 'Docker'
        IMAGE_NAME = 'aspnetcoremvcapp'          // Docker image name
        CONTAINER_NAME = 'aspnetcoremvc-container' // Docker container name
        HOST_PORT = '9090'                        // Port exposed on your machine
        CONTAINER_PORT = '8080'                     // Port inside the container (default for ASP.NET Core)
        LOG_FILE = 'container_logs.txt'            // File to store container logs
        COMPOSE_PROJECT_NAME = 'spendsmart' // Match the actual Jenkins job folder name or use same in both
        DOTNET_TOOLS = "${env.HOME}/.dotnet/tools"
        PATH = "${env.PATH}:${env.HOME}/.dotnet/tools"
    }

    stages {

        stage('Clean Workspace') {
            steps {
                echo "Cleaning workspace..."
                deleteDir()
            }
        }

        stage('Checkout Source Code') {
            steps {
                echo 'Cloning repository...'
                checkout scm  // Pulls code from your Git repository (GitHub/GitLab)
            }
        }

        stage('Restore Dependencies') {
            steps {
                echo 'Restoring NuGet packages...'
                sh 'dotnet restore'  // Restores packages from .csproj
            }
        }

        stage('Build Project') {
            steps {
                echo 'Building ASP.NET Core MVC app...'
                sh 'dotnet build --no-restore'  // Compiles your project
            }
        }

        stage('Publish Release Build') {
            steps {
                echo 'Publishing app to output folder...'
                sh 'dotnet publish -c Release -o out'  // Publishes files to /out
            }
        }
         stage('Run Unit Tests') {
            steps {
                sh 'dotnet tool install --global trx2junit || true'
                sh '''
                    export PATH="$PATH:$HOME/.dotnet/tools"
                    dotnet test --logger "trx;LogFileName=test_results.trx"
                    trx2junit test_results.trx -o test_results.xml
                '''
            }
         }

        stage('Stop & Remove Existing Container') {
            steps {
                echo 'Stopping and removing old container (if running)...'
                sh "docker stop ${CONTAINER_NAME} || true"
                sh "docker rm ${CONTAINER_NAME} || true"
            }
        }

        stage('Run App with Docker Compose') {
            steps {
                echo 'Running app with docker-compose...'
                sh 'docker compose -p ${COMPOSE_PROJECT_NAME} down || true'
                sh 'docker compose -p ${COMPOSE_PROJECT_NAME} up -d --build'
            }
        }
        stage('Debug Info') {
            steps {
                echo 'Checking container status and logs...'

                // List running containers
                sh 'docker ps -a'

                // Inspect the specific container
                sh "docker inspect ${CONTAINER_NAME} || true"

                // Fetch container logs
                sh "docker logs ${CONTAINER_NAME} > ${LOG_FILE} || true"
            }
        }
    }

    post {
        success {
            junit 'test_results.xml'
            echo "CI/CD pipeline completed successfully. App is running on http://localhost:${HOST_PORT}"
        }
        failure {
            junit 'test_results.xml'
            echo "CI/CD pipeline failed. Check the console output above for errors."
        }
    }
}
